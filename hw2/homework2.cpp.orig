/*********************************************************************
     	adapted from:   timothy budd
     	programmer:     kay zemoudeh
     	date:           8/17/98
     	file:           war2.cpp
     	description:    this program simulates the game of war. each player gets
     	                3 cards. each player displays one of her cards.
     	                the player with the highest ranking card wins 2 points.
     	                in case of a tie each player gets 1 point. after each
    	                round, each player draws a new card from the deck.

    	implementation: this program uses 4 classes: Card, Deck, Player, and
    	                RandomInteger . it is a good example of Object Oriented
    	                Programming (OOP). Note the simplicity of each class and
    	                the main() function.

    	modified by:    kay zemoudeh
    	date:           8/19/98
    	modification:   the original program was a simulation of computer vs
    	                computer. this modification changes the program to make
    	                it an interactive game between a human player and
    	                computer. this was done by introducing a new class
    	                HumanPlayer and specifically its draw() method.

    	modified by:    kay zemoudeh
    	date:           8/20/98
    	modification:   changed the program to use a different seed for the
    	                random number generator, so that the deck is shuffled
    	                and the cards are drawn differently for each run.
    	                also in light of the fact that HumanPlayer and Player
    	                have a lot in common, changed HumanPlayer to inherit
    	                from Player.

**********************************************************************/

#include <iostream>
#include <stdlib.h>       // for rand()
#include <algorithm>      // for random_shuffle()
#include <time.h>         // kay 8/20/98, for time()
#include <vector>
#include <iomanip>

using namespace std;

enum suits { diamond, club, heart, spade };

class Card {
  // private by default
  int      rank;        // rank of card
  suits    suit;        // suit of card
public:
  // constructors
  Card();               // initialize a card with default values
  Card(suits, int);     // initialize a card with given values
   	    // accessors
  int getRank() { return rank; } // an in-line function
  suits getSuit() { return suit; }
  // mutators
  void setRank(int rv) { rank = rv; }
  void setSuit(suits sv) { suit = sv; }
}; // Card

Card::Card()
{
  rank = 2;
  suit = spade;
} // constructor

Card::Card(suits sv, int rv)
{
  rank = rv;
  suit = sv;
} // constructor

// output a textual presentation of a Card
ostream &operator<<(ostream &out, Card aCard)
{
  switch (int rank = aCard.getRank()) {
  case 11: out << left << setw(2) << "J"; break;
  case 12: out << left << setw(2) << "Q"; break;
  case 13: out << left << setw(2) << "K"; break;
  case 14: out << left << setw(2) << "A"; break;
  default: out << left << setw(2) << rank;
  }
  
  switch (suits suit = aCard.getSuit()) {
  case diamond: out << left << setw(20) << " of Diamonds"; break;
  case spade:   out << left << setw(20) <<" of spades"; break;
  case heart:   out << left << setw(20) <<" of hearts"; break;
  case club:    out << left << setw(20) <<" of clubs"; break;
  }
  return out;
} // operator<<

class RandomInteger {
public:
  RandomInteger();
  unsigned int operator()(unsigned int);
}; // RandomInteger

RandomInteger::RandomInteger()
{
  srand(time(0));   // kay 8/20/98
} // constructor

unsigned int RandomInteger::operator()(unsigned int max)
{
  unsigned int rval = rand();
  return rval % max;
} // operator()

RandomInteger randomizer; // global object, often not a good idea!

class Deck {
  Card cards[52];       // deck of 52 cards
  int topCard;          // size of deck
public:
  Deck();
  // shuffle uses the generic algorithm random_shuffle from STL
  void shuffle() { random_shuffle(cards, cards+52, randomizer); }
  bool isEmpty() { return topCard <= 0; }
  Card draw();   // return next card
}; // Deck

Deck::Deck()
{
  topCard = 0;
  for (int i = 2; i <= 14; i++) {
    Card c1(diamond, i), c2(spade, i), c3(heart, i), c4(club, i);
    cards[topCard++] = c1;
    cards[topCard++] = c2;
    cards[topCard++] = c3;
    cards[topCard++] = c4;
  }
} // constructor

Card Deck::draw()
{
  if (!isEmpty())
    return cards[--topCard];
  else { 
    Card spadeAce(spade, 1);
    return spadeAce;
  }
} // draw



int maxColHeight( vector<Card>& a, vector<Card>& b, vector<Card>& c, vector<Card>& d)
{
  vector<int> v;
  v.push_back( a.size() );
  v.push_back( b.size() );
  v.push_back( c.size() );
  v.push_back( d.size() );

  for( int i = 0 ; i < v.size() -1; i++ ){
    for( int j = i + 1; j < v.size(); j++ ){
      if( v[i] > v[j] ){
	int temp = v[i];
	v[i] = v[j];
	v[j] = temp;
      }
    }
  }

  return v[3];
}	


main()
{
  Deck theDeck; // create a deck
  theDeck.shuffle();
  vector<vector<Card> > column(4);  

  int input, select, newColumn;
  int depth;
  bool fourAces = false;

  for( int i = 0; i < 4 ; i++ )
    column[i].push_back( theDeck.draw() );

//*************** main game loop ****************
  while( !theDeck.isEmpty() ){

    depth = maxColHeight( column[0], column[1], column[2], column[3] );
    
    cout << "   Col1                 Col2                  Col3                Col4" << endl;
    
    for( int j = 0; j < depth; j++){
        for( int i = 0; i < 4; i++){
	    if( j < column[i].size() )
	        cout << column[i][j];
	    else{
	        cout << "                      ";
	    }
	}
	cout << endl;
    }

    cout << endl;        
    cout << "Enter a column number ( 0 to draw four new cards): ";
    cin >> input;
    select = input - 1;
    
    if( input == 0 ){
        for( int i = 0; i < 4 ; i++ )
	    column[i].push_back( theDeck.draw() );
    }else{
        Card temp = column[select].back();

	if( temp.getRank() == 14 ){
	    cout << "Ace to where? ";
	    cin >> input;
	    newColumn = input - 1;
	    if( column[newColumn].empty() || (column[newColumn].back().getRank() == 14) ){
	        column[newColumn].push_back( temp );
		column[select].pop_back();
	    }
	}else{
	    for( int i = 0 ; i < 4; i++){
	        if( temp.getSuit() == column[i].back().getSuit() ){
		    if( temp.getRank() < column[i].back().getRank() ){
		        column[select].pop_back();
			break;
		    }
		}
	    }
	}
    }
    if( (column[0].back().getRank() == 14) && (column[1].back().getRank() == 14) && 
	(column[2].back().getRank() == 14) && (column[3].back().getRank() == 14) ){
        fourAces = true;
	break;
    }
  }//end game
  

  if( fourAces ){
      for( int j = 0; j < depth; j++){
	  for( int i = 0; i < 4; i++){
	      if( j < column[i].size() )
		  cout << column[i][j];
	      else{
		  cout << "                    ";
	      }
	  }
	  cout << endl;
      }
      cout << "Congratulations, you have beat the game!!" << endl;
  }
  else
      cout << "All cards have been drawn. Sorry :( " << endl;

} // main

